# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "master" branch
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run

name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "feature/devops" ]

env:
  PROJECT_ID: purplerelay #update Google Cloud project id
  SERVICE: purplerelay-registry-dev #update Cloud Run service name
  REGISTRY_LOCATION: us-east1 #update Artifact Registry location
  REGIONS: us-east1 #update Cloud Run service region
  TYPE: dev

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'write'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      #- name: Google Auth
      #  id: auth
      #  uses: 'google-github-actions/auth@v0'
      #  with:
      #    token_format: 'access_token'
      #    workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #    service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCLOUD_DEFAULT_CREDENTIALS }}'
          service_account: '215007526460-compute@developer.gserviceaccount.com'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      # Authenticate Docker to Google Cloud Artifact Registry
      #- name: Docker Auth
      #  id: docker-auth
      #  uses: 'docker/login-action@v1'
      #  with:
      #    username: 'oauth2accesstoken'
      #    password: '${{ steps.auth.outputs.access_token }}'
      #    registry: '${{ env.REGISTRY_LOCATION }}-docker.pkg.dev'
      - name: Update Repo
        run: |-
          sudo apt-get update -y
          sudo apt install git -y
          git clone https://github.com/purplerelay/relay.git
          cd relay
          git checkout feature/devops
          sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform
          terraform init
          terraform workspace select gcp
          terraform plan -var='regions=["us-east1", "us-west1"]' -var='environment=${{ env.TYPE }}'
          cd ..
      - name: Build and Push Container
        run: |-
          sudo cp -r ./relay/utils .
          sudo gcloud auth configure-docker "${{ env.REGISTRY_LOCATION }}-docker.pkg.dev --quiet"
          cat ~/.docker/config.json
          sudo docker build -t "${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/strfry:${{ github.sha }}" ./
          sudo docker push "${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/strfry:${{ github.sha }}"
          sudo gcloud run deploy ${{ env.PROJECT_ID }}-us-west1-app-${{ env.TYPE }} --image ${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/strfry:${{ github.sha }} --update-env-vars BUCKET=${{ env.PROJECT_ID }}-${{ env.REGISTRY_LOCATION }}-bucket-${{ env.TYPE }}

      # END - Docker auth and build

      #- name: Deploy to Cloud Run
      #  id: deploy
      #  uses: google-github-actions/deploy-cloudrun@v0
      #  with:
      #    service: ${{ env.SERVICE }}
      #    region: ${{ env.REGION }}
      #    # NOTE: If using a pre-built image, update the image name here
      #    image: ${{ env.REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
